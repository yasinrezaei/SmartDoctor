// Generated by Dagger (https://dagger.dev).
package com.example.smartdoctor.utils.di;

import com.example.smartdoctor.data.server.ApiService;
import com.google.gson.Gson;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApiModule_ProvideRetrofitFactory implements Factory<ApiService> {
  private final Provider<String> baseUrlProvider;

  private final Provider<Gson> gsonProvider;

  private final Provider<OkHttpClient> clientProvider;

  public ApiModule_ProvideRetrofitFactory(Provider<String> baseUrlProvider,
      Provider<Gson> gsonProvider, Provider<OkHttpClient> clientProvider) {
    this.baseUrlProvider = baseUrlProvider;
    this.gsonProvider = gsonProvider;
    this.clientProvider = clientProvider;
  }

  @Override
  public ApiService get() {
    return provideRetrofit(baseUrlProvider.get(), gsonProvider.get(), clientProvider.get());
  }

  public static ApiModule_ProvideRetrofitFactory create(Provider<String> baseUrlProvider,
      Provider<Gson> gsonProvider, Provider<OkHttpClient> clientProvider) {
    return new ApiModule_ProvideRetrofitFactory(baseUrlProvider, gsonProvider, clientProvider);
  }

  public static ApiService provideRetrofit(String baseUrl, Gson gson, OkHttpClient client) {
    return Preconditions.checkNotNullFromProvides(ApiModule.INSTANCE.provideRetrofit(baseUrl, gson, client));
  }
}
