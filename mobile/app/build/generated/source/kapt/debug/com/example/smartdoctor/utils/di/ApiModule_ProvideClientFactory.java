// Generated by Dagger (https://dagger.dev).
package com.example.smartdoctor.utils.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("javax.inject.Named")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApiModule_ProvideClientFactory implements Factory<OkHttpClient> {
  private final Provider<Long> timeProvider;

  private final Provider<HttpLoggingInterceptor> headerProvider;

  private final Provider<HttpLoggingInterceptor> bodyProvider;

  public ApiModule_ProvideClientFactory(Provider<Long> timeProvider,
      Provider<HttpLoggingInterceptor> headerProvider,
      Provider<HttpLoggingInterceptor> bodyProvider) {
    this.timeProvider = timeProvider;
    this.headerProvider = headerProvider;
    this.bodyProvider = bodyProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideClient(timeProvider.get(), headerProvider.get(), bodyProvider.get());
  }

  public static ApiModule_ProvideClientFactory create(Provider<Long> timeProvider,
      Provider<HttpLoggingInterceptor> headerProvider,
      Provider<HttpLoggingInterceptor> bodyProvider) {
    return new ApiModule_ProvideClientFactory(timeProvider, headerProvider, bodyProvider);
  }

  public static OkHttpClient provideClient(long time, HttpLoggingInterceptor header,
      HttpLoggingInterceptor body) {
    return Preconditions.checkNotNullFromProvides(ApiModule.INSTANCE.provideClient(time, header, body));
  }
}
