// Generated by Dagger (https://dagger.dev).
package com.example.smartdoctor.utils.di;

import android.content.Context;
import android.net.ConnectivityManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class OtherModule_ProvideConnectivityManagerFactory implements Factory<ConnectivityManager> {
  private final Provider<Context> contextProvider;

  public OtherModule_ProvideConnectivityManagerFactory(Provider<Context> contextProvider) {
    this.contextProvider = contextProvider;
  }

  @Override
  public ConnectivityManager get() {
    return provideConnectivityManager(contextProvider.get());
  }

  public static OtherModule_ProvideConnectivityManagerFactory create(
      Provider<Context> contextProvider) {
    return new OtherModule_ProvideConnectivityManagerFactory(contextProvider);
  }

  public static ConnectivityManager provideConnectivityManager(Context context) {
    return Preconditions.checkNotNullFromProvides(OtherModule.INSTANCE.provideConnectivityManager(context));
  }
}
